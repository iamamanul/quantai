name: Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # --- Clerk Environment Variables ---
      # IMPORTANT: These should be set as secrets in your GitHub repository settings
      # Go to your repository > Settings > Secrets and variables > Actions > New repository secret
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      NEXT_PUBLIC_CLERK_SIGN_IN_URL: /sign-in
      NEXT_PUBLIC_CLERK_SIGN_UP_URL: /sign-up
      NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: /onboarding
      NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: /onboarding

      # --- Database URL ---
      # IMPORTANT: This should also be set as a secret for security
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # --- AI API Keys ---
      # IMPORTANT: These should be set as secrets
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}

      # --- Inngest Keys ---
      # IMPORTANT: These should be set as secrets
      INNGEST_EVENT_KEY: ${{ secrets.INNGEST_EVENT_KEY }}
      INNGEST_SIGNING_KEY: ${{ secrets.INNGEST_SIGNING_KEY }}

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: "Installing Dependencies"
      run: npm i

    - name: "Build command"
      run: npm run build

    # --- Telegram Notification Step ---
    # This step is now correctly nested under the 'steps' of the 'build' job.
    - name: Telegram Notification
      # This makes sure the notification is sent even if previous steps fail
      if: always()
      run: |
        send_telegram_message() {
          local message="$1"
          curl -s -X POST \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="$message" \
          -d parse_mode="Markdown" \
          -d disable_web_page_preview=true
        }

        # Determine workflow status
        WORKFLOW_STATUS="Unknown"
        STATUS_EMOJI=""
        if [[ "${{ job.status }}" == "success" ]]; then
          WORKFLOW_STATUS="SUCCESS ‚úÖ"
          STATUS_EMOJI="‚úÖ"
        elif [[ "${{ job.status }}" == "failure" ]]; then
          WORKFLOW_STATUS="FAILED ‚ùå"
          STATUS_EMOJI="‚ùå"
        elif [[ "${{ job.status }}" == "cancelled" ]]; then
          WORKFLOW_STATUS="CANCELLED üö´"
          STATUS_EMOJI="üö´"
        fi

        # Get the commit SHA
        COMMIT_SHA="${{ github.sha }}"
        # Get the short commit SHA
        SHORT_COMMIT_SHA="${{ github.sha_short }}"

        # Sanitize repository name for Markdown
        REPOSITORY_NAME="${{ github.repository }}"
        REPOSITORY_NAME_SANITIZED=$(echo "$REPOSITORY_NAME" | sed 's@_@\\_@g')

        # Construct the message
        MESSAGE="*GitHub Workflow Status Report* ${STATUS_EMOJI}

        *Repository:* $REPOSITORY_NAME_SANITIZED
        *Workflow:* ${{ github.workflow }}
        *Status:* *$WORKFLOW_STATUS*
        *Commit:* \`${SHORT_COMMIT_SHA}\`
        *Branch:* \`${{ github.ref_name }}\`

        *Check full details here:*
        [View Workflow Run](${{ github.server_url }}/$REPOSITORY_NAME/actions/runs/${{ github.run_id }})"

        send_telegram_message "$MESSAGE"