# name: Deploy

# on:
#   push:
#     branches: [ "main" ]

# jobs:
#   # Job to build and push the Docker image to Docker Hub
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - name: Build Docker Image
#         run: |
#           docker build . \
#             -f Dockerfile.prod \
#             --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
#             -t iamamanul/quantai:latest
#       - name: Log in to Docker Hub
#         run: echo "${{secrets.DOCKERHUB_PASSWORD}}" | docker login -u ${{secrets.DOCKERHUB_USERNAME}} --password-stdin
#       - name: Push Docker Image
#         run: docker push iamamanul/quantai:latest

#   # ... (rest of your workflow) ...

# # Job to deploy the Docker image to the EC2 instance
# deploy-to-ec2:
#   runs-on: ubuntu-latest
#   needs: build-and-push
#   continue-on-error: true # Consider removing this after successful deployment for clearer error reporting
#   steps:
#     - name: Deploy to EC2
#       id: deploy_script
#       uses: appleboy/ssh-action@v1.0.3
#       with:
#         host: ${{ secrets.EC2_HOST }}
#         username: ${{ secrets.EC2_USERNAME }}
#         key: ${{ secrets.SSH_PRIVATE_KEY }}
#         # Add this 'envs' block to pass secrets as environment variables to the SSH session
#         envs: |
#           NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
#           CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
#           # The following are static strings, but it's good to keep them in 'envs' for consistency
#           NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
#           NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
#           NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/onboarding
#           NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/onboarding
#           DATABASE_URL=${{ secrets.DATABASE_URL }}
#           GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
#           GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
#           INNGEST_EVENT_KEY=${{ secrets.INNGEST_EVENT_KEY }}
#           INNGEST_SIGNING_KEY=${{ secrets.INNGEST_SIGNING_KEY }}
#         script: |
#           set -e
#           set -x

#           echo "Logging into Docker Hub..."
#           echo "${{secrets.DOCKERHUB_PASSWORD}}" | docker login -u ${{secrets.DOCKERHUB_USERNAME}} --password-stdin
#           echo "Docker login successful"

#           echo "Pulling latest Docker image..."
#           docker pull iamamanul/quantai:latest
#           echo "Docker pull successful"

#           echo "Attempting to stop existing quantai-app container..."
#           docker stop quantai-app || true

#           echo "Attempting to remove old quantai-app container..."
#           docker rm quantai-app || true

#           echo "Starting new container..."
#           docker run -d \
#             --name quantai-app \
#             -p 80:3000 \
#             -e NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY \ # These will now correctly pick up from the environment
#             -e CLERK_SECRET_KEY \
#             -e NEXT_PUBLIC_CLERK_SIGN_IN_URL \
#             -e NEXT_PUBLIC_CLERK_SIGN_UP_URL \
#             -e NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL \
#             -e NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL \
#             -e DATABASE_URL \
#             -e GEMINI_API_KEY \
#             -e GROQ_API_KEY \
#             -e INNGEST_EVENT_KEY \
#             -e INNGEST_SIGNING_KEY \
#             iamamanul/quantai:latest

#           echo "Deployment script finished."

#     # ... (rest of the Telegram notification step) ...

#       - name: Send Telegram Notification
#         if: steps.deploy_script.outcome == 'success'
#         uses: appleboy/telegram-action@master
#         with:
#           to: ${{ secrets.TELEGRAM_CHAT_ID }}
#           token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
#           message: |
#             ðŸš€ Deployment Successful!
#             Repository: ${{ github.repository }}
#             Branch: ${{ github.ref_name }}
#             Commit: ${{ github.sha }}
#             Website URL: http://${{ secrets.EC2_HOST }}
#             Check it out!


name: Deploy

on:
  push:
    branches:
      - "main"

jobs:
  # Job to build and push the Docker image to Docker Hub
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker build . \
            -f Dockerfile.prod \
            --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
            -t iamamanul/quantai:latest

      - name: Log in to Docker Hub
        run: echo "${{secrets.DOCKERHUB_PASSWORD}}" | docker login -u ${{secrets.DOCKERHUB_USERNAME}} --password-stdin

      - name: Push Docker Image
        run: docker push iamamanul/quantai:latest

  # Job to deploy the Docker image to the EC2 instance
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    continue-on-error: true # Keep this for now, but remove it once stable
    steps:
      - name: Deploy to EC2
        id: deploy_script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # ðŸŒŸðŸŒŸðŸŒŸ CRITICAL: THIS IS THE 'envs' BLOCK FOR PASSING SECRETS ðŸŒŸðŸŒŸðŸŒŸ
          # Ensure 'envs:' is directly under 'with:', and values are indented by 2 spaces
          # NOTE: These 'envs' are for the SSH action's environment, but we are explicitly
          # passing them in the docker run command below for robustness.
          envs: |
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
            NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
            NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
            NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/onboarding
            NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/onboarding
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            INNGEST_EVENT_KEY=${{ secrets.INNGEST_EVENT_KEY }}
            INNGEST_SIGNING_KEY=${{ secrets.INNGEST_SIGNING_KEY }}

          script: |
            set -e
            set -x

            echo "Logging into Docker Hub..."
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            echo "Docker login successful"

            echo "Pulling latest Docker image..."
            docker pull iamamanul/quantai:latest
            echo "Docker pull successful"

            echo "Attempting to stop existing quantai-app container..."
            docker stop quantai-app || true
            echo "Attempting to remove old quantai-app container..."
            docker rm quantai-app || true

            echo "Starting new container..."
            docker run -d \
              --name quantai-app \
              -p 80:3000 \
              -e NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" \
              -e CLERK_SECRET_KEY="${{ secrets.CLERK_SECRET_KEY }}" \
              -e NEXT_PUBLIC_CLERK_SIGN_IN_URL="/sign-in" \
              -e NEXT_PUBLIC_CLERK_SIGN_UP_URL="/sign-up" \
              -e NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL="/onboarding" \
              -e NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL="/onboarding" \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
              -e GROQ_API_KEY="${{ secrets.GROQ_API_KEY }}" \
              -e INNGEST_EVENT_KEY="${{ secrets.INNGEST_EVENT_KEY }}" \
              -e INNGEST_SIGNING_KEY="${{ secrets.INNGEST_SIGNING_KEY }}" \
              iamamanul/quantai:latest
            echo "Deployment script finished."

      - name: Send Telegram Notification
        # This step will only run if the 'Deploy to EC2' step succeeded
        if: steps.deploy_script.outcome == 'success'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ðŸš€ Deployment Successful!
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Website URL: http://${{ secrets.EC2_HOST }}
            Check it out!